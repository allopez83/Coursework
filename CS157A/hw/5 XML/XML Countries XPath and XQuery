1. Return the area of Mongolia. 

doc("countries.xml")/countries/country[@name eq "Mongolia"]/data(@area)

2. Return the names of all cities that have the same name as the country in which they are located.

let $c := doc("countries.xml")
return $c//country/city[name = parent::country/@name]/name

3. Return the average population of Russian-speaking countries. 

let $c := doc("countries.xml")
return avg($c/countries/country[language="Russian"]/data(@population))

4. Return the names of all countries where over 50% of the population speaks German. (Hint: Depending on your solution, you may want to use ".", which refers to the "current element" within an XPath expression.) 

let $c := doc("countries.xml")
for $lang in $c//language
where $lang="German" and data($lang/@percentage)>50
return $lang/parent::country/data(@name)

5. Return the name of the country with the highest population. (Hint: You may need to explicitly cast population numbers as integers with xs:int() to get the correct answer.) 

let $c := doc("countries.xml")
return $c/countries/country[@population = max($c//country/data(@population))]
